#!/usr/bin/env python3

import json
import locale
import sys
# import emails
import os
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4, letter

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sales = {"total_sales": 0}
  number_of_cars = {}
  by_year = {}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item

    # Done: also handle max sales
    if item["total_sales"] > max_sales["total_sales"]:
      max_sales = item
    year = item["car"]["car_year"]
    # Done: also handle most popular car_year
    if year not in by_year:
        by_year[year] = 0
    by_year[year] += item["total_sales"]
    
    car_name = item["car"]["car_make"]
    if car_name not in number_of_cars:
        number_of_cars[car_name] = 0
    number_of_cars[car_name] += item["total_sales"]

  cars_by_year = sorted([(by_year[key],key) for key in by_year])
  number_of_cars = sorted([[number_of_cars[key],key] for key in number_of_cars])
  
  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(
        format_car(max_sales["car"]), max_sales["total_sales"]),
    "The most popular year was {} with {} sales.".format(cars_by_year[-1][1],cars_by_year[-1][0])
  ]

  return summary, number_of_cars


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("Automating-Real-World-Tasks-with-Python/week3/car_sales.json")
  summary, number_of_cars = process_data(data)
  table_data = cars_dict_to_table(data)

#   OPTIONAL 1
  header = table_data[0]
  data = table_data[1:]
  colums_to_sort = "Total Sales"
  data.sort(key = lambda x: int(x[header.index(colums_to_sort)]))

#   OPTIONAL 2
#   number_of_cars = [[key,number_of_cars[key]] for key in number_of_cars]

  # Done: turn this into a PDF report

  c = canvas.Canvas("Automating-Real-World-Tasks-with-Python/week3/cars.pdf", pagesize=A4)
  w, h = A4
  text = c.beginText(50, h-50)
  text.setFont("Courier", 15)
  text.textLines("Sales summary for last month:")


  text.setFont("Courier", 8)
  text.textLines("\n".join(summary))

  data_text = [",".join([str(y) for y in x]) for x in data]

  text.setFont("Courier", 8)
  text.textLines(["","TABLE:"])
  text.textLines(",".join(header))
  text.textLines(data_text)
  c.drawText(text)
  c.save()

  # reports.generate("cars.pdf", "Sales summary for last month", "<br/>".join(summary), [header]+data)

  # # TODO: send the PDF report as an email attachment
  # sender = "automation@example.com"
  # receiver = "{}@example.com".format(os.environ.get('USER'))
  # subject =  "Sales summary for last month"
  # body = "\n".join(summary)
  # message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
  # emails.send(message)

if __name__ == "__main__":
  main(sys.argv)
